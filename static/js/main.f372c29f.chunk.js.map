{"version":3,"sources":["BlogCard.module.css","utiliz.js","BlogCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","isArrEmpty","arr","undefined","length","BlogCard","props","message","console","log","className","classes","New","title","description","likecount","onClick","onButtonClick","position","btn","App","state","showBlogs","blogArr","id","pos","alert","blogCards","map","pop","key","onBtnClick","setState","prevState","prevProps","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,IAAM,sBAAsB,UAAY,4BAA4B,IAAM,wB,mMCDtFC,EAAW,SAACC,GACf,aAASC,IAAND,GAAyB,OAANA,GAAcA,EAAIE,OAAO,I,gBCwBnCC,EAtBA,SAACC,GDID,IAACC,ECQb,ODRaA,ECMJD,EDLTE,QAAQC,IAAIF,GCQT,yBAAKG,UAAWC,IAAQC,KACxB,4BAAKN,EAAMO,OACX,2BAAIP,EAAMQ,aACV,yCAAc,0BAAMJ,UAAWC,IAAQI,WAAYT,EAAMS,YACzD,4BAAQC,QAAS,kBAAIV,EAAMW,cAAcX,EAAMY,WAAWR,UAAWC,IAAQQ,KAA7E,UC4ESC,G,iNAtFZC,MAAM,CACHC,WAAU,G,EAEZC,QAAS,CACP,CACGC,GAAG,IACHX,MAAM,cACZC,YAAY,wDACNC,UAAU,GAEb,CACGS,GAAG,IACHX,MAAM,cACZC,YAAY,wDACZC,UAAU,GAEP,CACGS,GAAG,IACDX,MAAM,cACdC,YAAY,yDACZC,UAAU,I,EAIVE,cAAc,SAACQ,GACZC,MAAM,2BAA6BD,I,EAGrCE,UAAU1B,EAAW,EAAKsB,SAAU,GAAI,EAAKA,QAAQK,KAAI,SAACC,EAAIJ,GAIzD,OAEG,kBAAC,EAAD,CAAUf,UAAU,MAAMoB,IAAKL,EAAKZ,MAAQgB,EAAIhB,MAAOC,YAAae,EAAIf,YAAaG,cAAe,EAAKA,cAAeC,SAAUO,O,EAWzIM,WAAa,WAGT,EAAKC,UAAS,SAACC,EAAUC,GACtB,MAAO,CAACZ,WAAWW,EAAUX,cAMnCd,QAAQC,IAAI,EAAKa,Y,wEAQpB,OADAd,QAAQC,IAAI,kBAET,yBAAKC,UAAU,OAEZ,4BAAQM,QAASmB,KAAKJ,WAAYrB,UAAU,OAAOyB,KAAKd,MAAMC,UAAY,YAAc,aACxF,6BAEGa,KAAKd,MAAMC,UAAYa,KAAKR,UAAY,U,GAtElCS,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f372c29f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"New\":\"BlogCard_New__182af\",\"likecount\":\"BlogCard_likecount__1MIGa\",\"btn\":\"BlogCard_btn__2-3QS\"};","const isArrEmpty=(arr)=>{\r\n   if(arr!==undefined && arr!==null && arr.length>0){\r\n      return false;\r\n   }\r\n   return true;\r\n}\r\n\r\nconst dumpLogs=(message)=>{\r\n   console.log(message);\r\n}\r\n\r\nexport {isArrEmpty,dumpLogs}","import React from 'react';\r\nimport { dumpLogs } from './utiliz';\r\nimport classes from './BlogCard.module.css';\r\nconst BlogCard=(props)=> {\r\n   \r\n   \r\n   // inBtnClick=()=>{\r\n   //   setState((prevState, prevProp)=>{\r\n   //    return  {\r\n   //       likecount:prevState.likecount + 1\r\n   //    }\r\n   // });\r\n   \r\n   dumpLogs(props)\r\n  \r\n   return(\r\n      <div className={classes.New} >\r\n      <h3>{props.title}</h3>\r\n      <p>{props.description}</p>\r\n      <p>Like Count:<span className={classes.likecount}>{props.likecount}</span></p>\r\n      <button onClick={()=>props.onButtonClick(props.position)} className={classes.btn}>Like</button>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default BlogCard;","import React,{Component} from 'react';\r\nimport BlogCard from './BlogCard';\r\nimport {isArrEmpty} from './utiliz';\r\n\r\nimport New from './BlogCard.module.css';\r\n\r\nimport './App.css';\r\n\r\n \r\nclass App extends Component{\r\n   state={\r\n      showBlogs:true\r\n   }\r\n    blogArr =[\r\n      {\r\n         id:'1',\r\n         title:'Blog List 1',\r\n   description:'Lorom Ipsum Dolor Lorom Ipsum Dolor Lorom Ipsum Dolor',         \r\n         likecount:0,\r\n      },\r\n      {\r\n         id:'2',\r\n         title:'Blog List 2',\r\n   description:'Lorom Ipsum Dolor Lorom Ipsum Dolor Lorom Ipsum Dolor',         \r\n   likecount:0,\r\n      },\r\n      {\r\n         id:'3',\r\n           title:'Blog List 3',\r\n   description:' Lorom Ipsum Dolor Lorom Ipsum Dolor Lorom Ipsum Dolor',         \r\n   likecount:0,\r\n      }\r\n   ]\r\n\r\n   onButtonClick=(pos)=>{\r\n      alert('Like btn clicked at pos=' + pos);\r\n   }\r\n\r\n    blogCards=isArrEmpty(this.blogArr)? []: this.blogArr.map((pop,pos) =>{\r\n         \r\n   \r\n   \r\n         return(\r\n            \r\n            <BlogCard className=\"New\" key={pos} title= {pop.title} description={pop.description} onButtonClick={this.onButtonClick} position={pos}/>\r\n               \r\n            // <div className=\"BlogCard\" key={pop.title}>\r\n            // <h3>{pop.title}</h3>\r\n            // <p>{pop.description}</p>\r\n            // </div> \r\n         )\r\n      \r\n   })\r\n   \r\n\r\n     onBtnClick = ()=>{\r\n         // let updateList = !this.state.showBlogs; // this method will not give you current value evrytime\r\n\r\n         this.setState((prevState,prevProps) => {          //this method gives current value everytime.\r\n            return({showBlogs:!prevState.showBlogs})\r\n         });\r\n\r\n       \r\n      \r\n\r\n      console.log(this.showBlogs);\r\n       \r\n    }\r\n\r\n   render()\r\n   \r\n{\r\n   console.log('Render Checked') //it prints when render value is checked\r\n   return(\r\n      <div className=\"App\">\r\n         \r\n         <button onClick={this.onBtnClick} className=\"btn\">{this.state.showBlogs ? 'Hide List' : 'Show List'}</button>\r\n         <br></br>\r\n         {\r\n            this.state.showBlogs ? this.blogCards : null\r\n            }\r\n      </div>\r\n   )\r\n}\r\n   \r\n   \r\n   //  return(\r\n   //     <div>\r\n   //    {/* <div className='BlogCard'>\r\n   //       {/* <h3>{blogObj.title}</h3>\r\n   //       <p>{blogObj.description}</p>\r\n   //    </div>  */} */\r\n   //    </div>\r\n    \r\n    }\r\n   \r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}